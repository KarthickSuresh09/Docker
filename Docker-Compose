                                                      Scaling
                                                         ||
                                                         ||
                                                         ||
              =============================================================================================
              ||                                                                                         ||
              ||                                                                                         ||
              ||                                                                                         ||
     Horizantal Scaling                                                                          Vertical Scaling
              ||                                                                                         ||
              ||                                                                                         ||
============================                                                                 ========================
||                        ||                                                                 ||                    ||
||                        ||                                                                 ||                    ||
Scale In              Scale Out                                                          Scale Up              Scale Down


* Vertical Scaling means: it will increas the server capicty like t2.micro → m5.large increase RAM & CPU Single point of failure
* Horizantal Scaling means: it will increas the server capicty like Add more servers	Fault-tolerant (multiple servers)	



----------------               ----------------
|   Contral    |               |    Data       |
|              |==============>|               |
|  Plane       |               |    Plane      |
|              |               |               |
----------------               -----------------



What is Docker Compose?
Docker Compose is a tool used to define and manage multi-container Docker applications. 
It allows you to run multiple Docker containers with a single YAML configuration file 
(docker-compose.yml).



1. Insatll docker compose ==> 2. What is your app----> Docker file ==> 
3. Write the YAML file ==> 4. Run Docker compose run this YAML file


project/
├── app
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
└── docker-compose.yml


Step 1 create a folder structure
mkdir -p project/app && touch /project/app{app.py,requirements.txt} project/docker-compose.yml


step2 content of the app.py
from flask import Flask
import psycopg2

app = Flask(__name__)

@app.route("/")
def hello_world():
    return "Hello, this is a Docker compose!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)


Step 3: content requirements.txt
flask
psycopg2-binary

Step 4 content of the docker-compose.yml
version: "3.9"

services:
  web:
    build:
      context: ./app
    ports:
      - "5000:5000"
    depends_on:
      - db
    

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:


Step 5 create a Dockerfile
FROM python:3.9-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
CMD ["python", "app.py"]


Step 6 docker-compose.yml
---
version: "3.9"

services:
  web:
    build:
      context: ./app
    ports:
      - "5000:5000"
    depends_on:
      - db
    

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:


Step 7 install linux tree package
apt install tree

Step 8 Installing docker-compose
apt install docker-compose

Step 9
To run docker-compose.yaml file (execute this directory of where the docker-compose file)
docker-compose up -d
