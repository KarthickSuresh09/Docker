creating creating custom image container networking

#1 Write a Python Code =========>  Sample web app
#2: We will create Dockerfile
#3: Create image
#4: Launch Container

* Step1 
create a folder myapp

* step2 creat file app.py
vi app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Hello, this is a simple web application!'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)



* step3 create file requirements.txt
vi requirements.txt

Flask==2.0.1
Werkzeug==2.0.1



* step4 
create a Dockerfile
FROM python:3.8-slim

WORKDIR /app

COPY . /app/

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 5000

CMD ["python", "app.py"]


* Step 5 
build the image
docker build -t myapp


* Step 6 ==> this is port mapping method
this command will assigned port no numeber for machine after you can check in browser
docker run -p 5000:5000 myapp
=> this method will not block CMD
docker run -d -p 3000:3000 myapp


______________________
|Dockerfile reference|
----------------------


ADD	        :Add local or remote files and directories.
ARG	        :Use build-time variables.
CMD	        :Specify default commands.
COPY        :Copy files and directories.
ENTRYPOINT	:Specify default executable.
ENV	        :Set environment variables.
EXPOSE	    :Describe which ports your application is listening on.
FROM	    :Create a new build stage from a base image.
HEALTHCHECK	:Check a container's health on startup.
LABEL	    :Add metadata to an image.
MAINTAINER	:Specify the author of an image.
ONBUILD	    :Specify instructions for when the image is used in a build.
RUN	        :Execute build commands.
SHELL	    :Set the default shell of an image.
STOPSIGNAL	:Specify the system call signal for exiting a container.
USER	    :Set user and group ID.
VOLUME	    :Create volume mounts.
WORKDIR	    :Change working directory.
